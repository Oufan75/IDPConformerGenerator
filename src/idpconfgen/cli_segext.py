"""
Extract secondary structure protein segments from PDBs.

Requires a *.dssp file as generated by `idpconfgen ssext` CLI.

USAGE:

idpcfongen segext PDBS_FOLDER DSSPFILE -d OUTPUTFOLDER -s [L/H/E/A]
"""
import argparse
from functools import partial

from idpconfgen import Path, log
from idpconfgen.core import definitions as DEFS
from idpconfgen.libs import libcli, libio, libstructure, libparse, libpdb
from idpconfgen.logger import S, T, init_files
from idpconfgen.libs.libhigherlevel import segment_split


LOGFILESNAMES = '.idpconfgen_segext'

_name = 'segsext'
_help = 'Split PDB into secondary structure segments.'
_prog, _des, _us = libcli.parse_doc_params(__doc__)

ap = libcli.CustomParser(
    prog=_prog,
    description=libcli.detailed.format(_des),
    usage=_us,
    formatter_class=argparse.RawDescriptionHelpFormatter,
    )

libcli.add_argument_pdb_files(ap)

ap.add_argument(
    'sscalc_file',
    help='The DSSP file as saved by IDPConfGen SSCALC CLI',
    )

libcli.add_argument_destination_folder(ap)

ap.add_argument(
    '-s',
    '--structure',
    help=(
        'The secondary structure type to extract. '
        'Defaults to \'all\'. '
        'A subfolder is created for each secondary structure type'
        ),
    default='all',
    )

ap.add_argument(
    '-a',
    '--atoms',
    help=(
        'List of atom names to save in the selection.\n'
        'Defaults to `N`, `CA`, and `C`.'
        ),
    default='all',  # ('N', 'CA', 'C'),
    nargs='+',
    )


def filter_dssp_segments(seg, required='all'):
    if required == 'all':
        return True
    else:
        return seg == required


def main(
        pdb_files,
        sscalc_file,
        atoms,
        minimum_size=4,
        destination=None,
        structure='all',
        func=None,
        chunks=5000,
        ):

    ssdata = read_dictionary_from_disk(sscalc_file)
    pdbs2operate = FileReaderIterator(pdb_files, ext='.pdb')

    execute = partial(pool_function_in_chunks(
        segment_split,
        pdbs2operate,
        ncores=ncores,
        chunks=chunks,
        ssdata=ssdata,
        structure=structure,
        ))

    for run in execute():
        save_pairs_to_disk(run, destination=destination)


if __name__ == '__main__':
    maincli()
